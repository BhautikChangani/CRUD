
@using Kendo.Mvc.UI
@using Kendo.Mvc.Extensions
@using CRUD_list.DBModels

<div>
    <a href="@Url.Action("Index", "User")" class="k-button k-button-md k-rounded-md k-button-solid k-button-solid-primary m-2 nav_link">Go to First Page</a>
</div>
<div id="grid">
    @Html.Partial("_SearchFilter", new ViewDataDictionary { { "Id", 2 } })
</div>

<script>
    $(document).ready(function () {

        $("#grid").kendoGrid({
            sortable: true,
            filterable: true,
            pageable: {
                pageSizes: [10, 20, 50],
                buttonCount: 5
            },
            dataSource: {
                transport: {
                    read: "/User/GetAdminData",
                    update: {
                        url: "/User/UpdateAdminData",
                        type: "Post"
                    },
                    create: {
                        url: "/User/UpdateAdminData",
                        type: "Post"
                    },
                    destroy: {
                        url: "/User/DeleteAdminData",
                        type: "Post"
                    }
                },
                schema: {
                    model: {
                        id: "AdminId",
                        fields: {
                            AdminId: { editable: false, nullable: true },
                            AdminDept: { validation: { required: true } },
                            AdminAst: { validation: { required: true } },
                            Admin: { validation: { required: true } },
                            AdminSalary: { validation: { required: true }, type: "number" }
                        }
                    }
                },
                pageSize: 10,
            },
            events: {
                edit: "onEdit"
            },
            toolbar: [
                { name: "create", text: "Add New Record" },
                { name: "delete", text: "Delete All", iconClass: "k-icon k-i-trash" }
            ],
            columns: [
                {
                    selectable: true,
                    width: 75,
                    attributes: {
                        "class": "row-checkbox",
                    }
                },

                { field: "AdminId", title: "Admin Id", width: "120px", filterable: false },
                {
                    field: "AdminDept",
                    title: "Department",
                    width: "200px",
                    editor: departmentDropDownEditor,
                    filterable: {
                        multi: true,
                        dataSource: {
                            transport: {
                                read: "/User/GetAdminDepartment",
                            },
                            schema: {
                                model: {
                                    id: "AdminDeptId",
                                    fields: {
                                        AdminDeptId: { type: "number" },
                                        AdminDept: { type: "string" }
                                    }
                                }
                            }
                        },

                        template: function (dataItem) {
                            return '<input type="checkbox" name="deptFilter" value="' + dataItem.AdminDeptId + '"> ' + dataItem.AdminDept;
                        },
                        checkAll: true,
                        messages: {
                            checkAll: "Select All",
                            clear: "Clear",
                            filter: "Apply"
                        },
                        operators: {
                            string: {
                                contains: "Contains"
                            }
                        },
                        ui: "checkbox"
                    }
                },
                {
                    field: "AdminAst",
                    title: "Admin Assistant",
                    width: "200px",
                    editor: managerDropDownEditor,
                    filterable: {
                        multi: true,
                        dataSource: {
                            transport: {
                                read: '/User/GetAdminManagerList'
                            },
                            schema: {
                                model: {
                                    id: "AdminAstId",
                                    fields: {
                                        AdminAstId: { type: "number" },
                                        AdminAst: { type: "string" }
                                    }
                                }
                            }
                        },

                        template: function (dataItem) {
                            return '<input type="checkbox" name="mngrFilter" value="' + dataItem.AdminAstId + '"> ' + dataItem.AdminAst;
                        },
                        checkAll: true,
                        message: {
                            checkAll: "Select All",
                            clear: "Clear",
                            filter: "Apply"
                        },
                        operators: {
                            string: {
                                contains: "Contains"
                            }
                        },
                        ui: "checkbox"
                    }
                },
                {
                    field: "Admin",
                    title: "Admin Name",
                    width: "200px",
                    filterable: {
                        cell: {
                            operator: "contains",
                            suggestionOperator: "contains"
                        },
                        operators: {
                            string: {
                                contains: "Contains",
                                eq: "Equal to",
                                startswith: "Starts with",
                                endswith: "Ends with"
                            }
                        },
                    }
                },
                {
                    field: "AdminSalary",
                    title: "Admin Salary",
                    width: "200px",
                    sortable: true,
                    filterable: {
                        cell: {
                            operator: "contains",
                            suggestionOperator: "contains",
                            template: function (args) {
                                args.element.kendoNumericTextBox({
                                    format: "n0"
                                });
                            }
                        },
                        operators: {
                            number: {
                                eq: "Equal to",
                                lt: "Less than",
                                lte: "Less than or equal to",
                                gt: "Greater than",
                                gte: "Greater than or equal to"
                            }
                        }
                    }
                },
                { command: ["edit", "destroy"], title: "Action", width: "250px" }
            ],

            editable: {
                mode: "popup",
            },
            /*dataBound: function (e) {
                var grid = this;
                grid.tbody.find("tr").each(function () {
                    var dataItem = grid.dataItem(this);
                    console.log(dataItem);
                    if (dataItem && dataItem.MngrName == "Manager6") {
                        $(this).addClass("high-salary-row"); // Apply a CSS class for high salary rows
                    }
                });
            },*/
            save: function (e) {
                setTimeout(function () {
                    $("#grid").data("kendoGrid").dataSource.read();
                }, 400);
            },

        });

        $("#grid").on("click", ".k-grid-delete", function () {
            deleteSelectedRows();
        });

    });
</script>
<style>
    .high-salary-row {
        background-color: cadetblue !important;
    }
</style>
<script>

    function departmentDropDownEditor(container, options) {
        $('<input required name="' + options.field + '"/>')
            .appendTo(container)
            .kendoMultiColumnComboBox({
                dataTextField: "AdminDept",
                dataValueField: "AdminDept",
                height: 400,
                width: 400,
                columns: [
                    { field: "AdminDeptId", title: "Department Id", width: 200 },
                    { field: "AdminDept", title: "Department Name", width: 200 }
                ],
                footerTemplate: 'Total #: instance.dataSource.total() # items found',
                filter: "contains",
                filterFields: ["AdminDept"],
                dataSource: {
                    transport: {
                        read: "/User/GetAdminDepartment",
                    },
                    schema: {
                        model: {
                            id: "AdminDeptId",
                            fields: {
                                AdminDeptId: { type: "number" },
                                AdminDept: { type: "string" }
                            }
                        }
                    }
                },
                change: function (e) {
                    var widget = e.sender;

                    if (widget.value() && widget.select() === -1) {
                        widget.value("");
                    }
                }
            });
    }

    function managerDropDownEditor(container, options) {
        $('<input required name="' + options.field + '"/>')
            .appendTo(container)
            .kendoMultiColumnComboBox({
                dataTextField: "AdminAst",
                dataValueField: "AdminAst",
                height: 400,
                width: 400,
                columns: [
                    { field: "AdminAstId", title: "Assistant Id", width: 200 },
                    { field: "AdminAst", title: "Assistant Name", width: 200 }
                ],
                footerTemplate: 'Total #: instance.dataSource.total() # items found',
                filter: "contains",
                filterFields: ["AdminAst"],
                dataSource: {
                    transport: {
                        read: "/User/GetAdminManagerList",
                    },
                    schema: {
                        model: {
                            id: "AdminAstId",
                            fields: {
                                AdminAstId: { type: "number" },
                                AdminAst: { type: "string" }
                            }
                        }
                    }
                },
                change: function (e) {
                    var widget = e.sender;

                    if (widget.value() && widget.select() === -1) {
                        widget.value("");
                    }
                }
            });
    }

    function deleteSelectedRows() {
        var grid = $("#grid").data("kendoGrid");
        var selectedRows = grid.select();
        var dataItems = selectedRows.map(function (index, row) {
            return grid.dataItem(row);
        }).toArray();
        if (dataItems.length === 0) {
            alert("Please select at least one row to delete.");
            return;
        }

        if (confirm("Are you sure you want to delete the selected rows?")) {
            var dataToSend = {
                selectedItems: dataItems
            };

            $.ajax({
                url: '/User/DeleteAllAdmin',
                type: 'POST',
                contentType: 'application/json',
                data: JSON.stringify(dataToSend),
                success: function (response) {
                    console.log('Deleted successfully:', response);
                    grid.dataSource.read();
                },
                error: function (xhr, status, error) {
                    console.error('Error deleting:', error);
                }
            });

        }
    }

</script>
<style>
    .nav_link:hover {
        color: white
    }
</style>