@model IEnumerable<Kendo.Mvc.Examples.Models.TreeList.EmployeeDirectoryModel>

@{ var culture = System.Threading.Thread.CurrentThread.CurrentCulture.ToString(); }

@section scripts {
    <script data-src="@Url.Script("cultures/kendo.culture." + culture + ".min.js")"></script>
    <script type="text/javascript">
        var href = window.location.href;
        if (href.indexOf('culture') > -1) {
            $('#CulturesSelector').val(href.replace(/(.*)culture=([^&]*)/, '$2'));
        }

        function cultureChange() {
            var value = this.value();
            if (href.indexOf('culture') > -1) {
                href = href.replace(/culture=([^&]*)/, 'culture=' + value);
            } else {
                href += href.indexOf('?') > -1 ? '&culture=' + value : '?culture=' + value;
            }
            window.location.href = href;
        }

        function error(e) {
            if (e.errors) {
                var message = "Errors:\n";
                $.each(e.errors, function (key, value) {
                    if ('errors' in value) {
                        $.each(value.errors, function () {
                            message += this + "\n";
                        });
                    }
                });
                alert(message);
            }
        }
    </script>
}

<script type="text/javascript">
    //set the Kendo UI culture
    kendo.culture("@culture");
</script>

<div class="configurator">
    <div class="header">Configurator</div>
    <div class="box-col">
        <ul class="options">
            <li>
                Choose culture:
                @(Html.Kendo().DropDownList()
                .Name("CulturesSelector")
                .BindTo(new[] { "en-US", "de-DE", "bg-BG", "ru-RU", "es-ES" })
                .Value(culture)
                .Events(events => events.Change("cultureChange"))
            )
            </li>
        </ul>
    </div>
</div>

@(Html.Kendo().TreeList<Kendo.Mvc.Examples.Models.TreeList.EmployeeDirectoryModel>()
    .Name("treelist")
    .Toolbar(toolbar => toolbar.Create())
    .Columns(columns =>
    {
        columns.Add().Field(e => e.FirstName).Title("First Name").Width(220);
        columns.Add().Field(e => e.LastName).Title("Last Name").Width(100);
        columns.Add().Field(e => e.Position);
        columns.Add().Field(e => e.HireDate).Format("{0:MMMM d, yyyy}");
        columns.Add().Field(e => e.Phone);
        columns.Add().Field(e => e.Extension).Title("Ext").Format("{0:#}");
        columns.Add().Title("Edit").Width(350).Command(c =>
        {
            c.Edit();
            c.Destroy();
        })

        .HtmlAttributes(new
        {
            style = "text-align: center;"
        });
    })
    .ColumnMenu()
    .Sortable()
    .Editable(e => e.Mode(TreeListEditMode.InLine))
    .DataSource(dataSource => dataSource
        .Create(create => create.Action("Create", "TreeList"))
        .Read(read => read.Action("All", "TreeList"))
        .Update(update => update.Action("Update", "TreeList"))
        .Destroy(delete => delete.Action("Destroy", "TreeList"))
        .Model(m =>
        {
            m.Id(f => f.EmployeeId);
            m.ParentId(f => f.ReportsTo);
            m.Expanded(true);
            m.Field(f => f.FirstName);
            m.Field(f => f.LastName);
            m.Field(f => f.ReportsTo);
            m.Field(f => f.HireDate);
            m.Field(f => f.BirthDate);
            m.Field(f => f.Extension);
            m.Field(f => f.Position);
        })
        .Events(e=>e.Error("error"))
    )
    .Height(540)
)
