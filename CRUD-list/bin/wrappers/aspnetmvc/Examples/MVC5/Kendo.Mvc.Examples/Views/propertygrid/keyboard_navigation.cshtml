@using Kendo.Mvc.Examples.Models.PropertyGrid;
@model PropertyGridItemsViewModel

<div class="demo-section wide">
    @(Html.Kendo().PropertyGrid<PropertyGridItemsViewModel>()
        .Name("propertyGrid")
        .HtmlAttributes(new { style = "margin: auto;"})
        .Model(Model)
        .Columns(columns => columns.FieldColumn(fieldCol => fieldCol.Width(200)).ValueColumn(valueCol => valueCol.Width(250)))
        .Groupable(true)
        .Navigatable(true)
        .ContextMenu(true)
        .EditMode(true)
        .Resizable(true)
        .Items(items =>
        {
            items.Add().Field(f => f.size);
            items.Add().Field(f => f.fillMode);
            items.Add().Field(f => f.themeColor);
            items.Add().Field(f => f.rounded);
            items.Add().Field(f => f.icon)
            .TemplateHandler("iconTemplate")
            .Editor(editor => editor
                .DropDownList()
                .DataTextField("Text")
                .DataValueField("Value")
                .BindTo(new List<SelectListItem>() {
                    new SelectListItem() {
                        Text = "gear", Value = "gear"
                    },
                    new SelectListItem() {
                        Text = "star", Value = "star"
                    },
                    new SelectListItem() {
                        Text = "folder", Value = "folder"
                    },
                    new SelectListItem() {
                        Text = "user", Value = "user"
                    },
                    new SelectListItem() {
                        Text = "info-circle", Value = "info-circle"
                    }
                }));

            items.Add().Field("font").TemplateHandler("fontTemplate")
            .Items(childItems =>
            {
                childItems.Add().Field("fontWeight").Editor(editor => editor.NumericTextBox().Step(100).Min(100).Max(900));
                childItems.Add().Field("fontFamily").Editor(editor => editor
                .AutoComplete()
                .BindTo(new string[] { "Arial", "Roboto", "Georgia", "Calibri", "Cursive", "Monospace", "Fantasy" }));
            });
        })
        .Events(ev => ev.Save("saveHandler"))
        )
</div>

@section scripts {
    <script>
    function iconTemplate(data) {
        return `${kendo.ui.icon(data.value)}`;
    }

    function fontTemplate(data) {
        var propertyGridModel = $("#propertyGrid").data('kendoPropertyGrid').model();
        return `<span class="fontWeight">${propertyGridModel.font["fontWeight"]}</span> <span class="fontFamily">${propertyGridModel.font["fontFamily"]}</span>`;
    }

    function saveHandler(e) {
        var model = e.model;
        var value = e.values ? e.values.value : model.value;

        if (model.field == 'fontWeight') {
            $('.fontWeight').text(value);
        } else if (model.field == 'fontFamily') {
            $('.fontFamily').text(value);
        }
    }

    $(document.body).keydown(function (e) {
        if (e.altKey && e.keyCode == 87) {
            $("#propertyGrid").data("kendoPropertyGrid").table.focus();
        }
    });
    </script>
}

<style>
    #propertyGrid {
        width: 70%;
    }

    @@media (max-width: 1038px) {
        #propertyGrid {
            width: 100%;
        }
    }
</style>
