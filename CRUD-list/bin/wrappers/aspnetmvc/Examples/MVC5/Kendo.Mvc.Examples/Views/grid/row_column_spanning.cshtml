@using Kendo.Mvc

@(Html.Kendo().Grid<Kendo.Mvc.Examples.Models.DetailProductViewModel>()
    .Name("grid")
    .Columns(columns =>
    {
        columns.Bound(p => p.Category.CategoryName).Title("Category").Width(125).HtmlAttributes("categoryAttributesHandler");
        columns.Bound(p => p.ProductName).ClientTemplate(@"<div class='product-photo' 
                    style='background-image: url(" + @Url.Content("~/content/web/foods/#:data.ProductID#.jpg") + ");'></div><div class='product-name'>#: ProductName #</div>").Width(300);
        columns.Bound(p => p.UnitPrice).Title("Price").Width(105);
        columns.Bound(p => p.Discontinued).Title("In Stock").Width(130)
                            .ClientTemplate("<span id='badge_#=ProductID#' class='badgeTemplate'></span>")
                            .HtmlAttributes("discontinuedAttributesHandler");
        columns.Bound(p => p.UnitsInStock).Title("Units").Width(105).HtmlAttributes("hiddenHandler");
        columns.Bound(p => p.TotalSales).Title("Total Sales").Width(140).Format("{0:c}").HtmlAttributes("hiddenHandler");
    })
    .Height(700)
    .Pageable()
    .Sortable()
    .Scrollable()
    .Navigatable()
    .Events(events => events.DataBound("onDataBound"))
    .DataSource(dataSource => dataSource
        .Ajax()
        .Batch(true)
        .PageSize(20)
        .AutoSync(true)
        .ServerOperation(false)
        .Events(events => events.Error("error_handler"))
        .Model(model =>
        {
            model.Id(p => p.ProductID);
            model.Field(p => p.ProductID).Editable(false);
            model.Field(p => p.Discontinued).Editable(false);
            model.Field(p => p.TotalSales).Editable(false);
        })
        .Group(group=>group.Add("Category.CategoryName", typeof(string),System.ComponentModel.ListSortDirection.Descending))
        .Aggregates(agg=>agg.Add(field=>field.TotalSales).Sum())
        .Create("DetailProducts_Create", "Grid")
        .Read("DetailProducts_Read", "Grid")
        .Update("DetailProducts_Update", "Grid")
        .Destroy("DetailProducts_Destroy", "Grid")
    )
)

@section scripts{
    <script type="text/javascript">
        let useAlternateSpannedColor = false;
        const spannedColorClass = "first-alternate-spanned-cell";
        const spannedAlternateColorClass = "second-alternate-spanned-cell";

        function categoryAttributesHandler(dataItem) {
            let grid = $("#grid").getKendoGrid();
            const dataView = grid.dataItems();
            let currentIndex = dataView.indexOf(dataItem);
            const prevDataItem = currentIndex === 0 ? null : dataView.at(currentIndex - 1);
            let nextDataItem = dataView.at(++currentIndex);
            let rowSpan = 1;

            if (prevDataItem && dataItem.Category.CategoryName === prevDataItem.Category.CategoryName) {
                // add 'hidden' attribute to hide the cell if the previous item has the same value
                return {
                    hidden: 'hidden'
                }
            }

            // calculate the rowspan for a cell
            while (nextDataItem) {
                if (dataItem.Category.CategoryName === nextDataItem.Category.CategoryName) {
                rowSpan++;
                } else {
                break;
                }

                nextDataItem = dataView.at(++currentIndex);
            }

            // the styling attributes or classes to set on the <td> element of the cell
            let resultAttributes = { rowSpan, style: "text-align: center" };
            if (rowSpan > 1) {
                resultAttributes["class"] = !useAlternateSpannedColor ? spannedColorClass : spannedAlternateColorClass;
                useAlternateSpannedColor = !useAlternateSpannedColor;
            }

            return resultAttributes;
        };

        function discontinuedAttributesHandler(dataItem) {
            if (dataItem.Discontinued) {
                return {
                colSpan: 3,
                "class": "!k-text-center"
                };
            } else {
                return {
                "class": "!k-text-center"
                };
            }
        };

        function hiddenHandler(dataItem) {
            if (dataItem.Discontinued) {
                return { hidden: "hidden" };
            }
        };

        function error_handler(e) {
            if (e.errors) {
                var message = "Errors:\n";
                $.each(e.errors, function (key, value) {
                    if ('errors' in value) {
                        $.each(value.errors, function () {
                            message += this + "\n";
                        });
                    }
                });
                alert(message);
            }
        }

        function onDataBound(e) {
            var grid = this;
            grid.table.find("tr").each(function () {
                var dataItem = grid.dataItem(this);
                var themeColor = !dataItem.Discontinued ? 'success' : 'error';
                var text = !dataItem.Discontinued ? 'available' : 'not available';

                $(this).find(".badgeTemplate").kendoBadge({
                    themeColor: themeColor,
                    text: text,
                });


                kendo.bind($(this), dataItem);
            });
        }

        function returnFalse() {
            return false;
        }
    </script>
}

<style type="text/css">
    .first-alternate-spanned-cell {
        background-color: #f4f4f4;
    }

    .second-alternate-spanned-cell {
        background-color: #e0e0e0;
    }

    .product-photo {
        display: inline-block;
        width: 32px;
        height: 32px;
        border-radius: 50%;
        background-size: 32px 35px;
        background-position: center center;
        vertical-align: middle;
        line-height: 32px;
        box-shadow: inset 0 0 1px #999, inset 0 0 10px rgba(0, 0, 0, .2);
        margin-right: 5px;
    }

    .product-name {
        display: inline-block;
        vertical-align: middle;
        line-height: 32px;
        padding-left: 3px;
    }
</style>