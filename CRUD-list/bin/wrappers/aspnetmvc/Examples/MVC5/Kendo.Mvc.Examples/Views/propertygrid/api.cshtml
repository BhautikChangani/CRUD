@using Kendo.Mvc.Examples.Models.PropertyGrid;
@model PropertyViewModel

<div class="configurator">
    <div class="header">Configurator</div>

    <div class="box-col">
        <h4>Toggle state</h4>
        <ul class="options">
            <li>
                <button id="toggle-details">Toggle Details</button>
            </li>
        </ul>
    </div>
    <div class="box-col">
        <h4>Model</h4>
        <ul class="options">
            <li>
                <button id="getModel">Get Model</button>
            </li>
        </ul>
    </div>
    <div class="box-col">
        <h4>Select/ Edit</h4>
        <ul class="options">
            <li>
                <input type="text" id="newValue" value="2" placeholder="e.g. 5" />
                <button id="select-property">Select Property</button>
            </li>
            <li>
                <input type="text" id="edit-value" value="2" placeholder="e.g. 5" />
                <button id="edit-property">Edit Property</button>
            </li>
        </ul>
    </div>
    <div class="box-col">
        <h4>Expand/ Collapse</h4>
        <ul class="options">
            <li>
                <button id="toggle-group">Expand/Collapse Group</button>
            </li>
            <li>
                <button id="toggle-item">Expand/Collapse Item with Nested Properties</button>
            </li>
        </ul>
    </div>
</div>
<div class="demo-section wide">
    @(Html.Kendo().PropertyGrid<PropertyViewModel>()
        .Name("propertyGrid")
        .HtmlAttributes(new { style = "margin: auto;" })
        .Model(Model)
        .Columns(columns => columns.FieldColumn(fieldCol => fieldCol.Width(200)).ValueColumn(valueCol => valueCol.Width(250)))
        .Groupable(true)
        .Navigatable(true)
        .ContextMenu(true)
        .EditMode(true)
        .Resizable(true)
        .Items(items =>
        {
            items.Add().Field(f => f.size);
            items.Add().Field(f => f.fillMode);
            items.Add().Field(f => f.themeColor);
            items.Add().Field(f => f.rounded);
            items.Add().Field(f => f.icon)
            .TemplateHandler("iconTemplate")
            .Editor(editor => editor
                .DropDownList()
                .DataTextField("Text")
                .DataValueField("Value")
                .BindTo(new List<SelectListItem>() {
                    new SelectListItem() {
                        Text = "gear", Value = "gear"
                    },
                    new SelectListItem() {
                        Text = "star", Value = "star"
                    },
                    new SelectListItem() {
                        Text = "folder", Value = "folder"
                    },
                    new SelectListItem() {
                        Text = "user", Value = "user"
                    },
                    new SelectListItem() {
                        Text = "info-circle", Value = "info-circle"
                    }
                }));

            items.Add().Field("font").TemplateHandler("fontTemplate")
            .Items(childItems =>
            {
                childItems.Add().Field("fontWeight").Editor(editor => editor.NumericTextBox().Step(100).Min(100).Max(900));
                childItems.Add().Field("fontFamily").Editor(editor => editor
                .AutoComplete()
                .BindTo(new string[] { "Arial", "Roboto", "Georgia", "Calibri", "Cursive", "Monospace", "Fantasy" }));
            });

            items.Add().Field("alignment").Template("&nbsp;")
            .Items(childItems =>
            {
                childItems.Add().Field("margin").Editor(editor => editor.NumericTextBox().Step(10).Min(1).Max(900));
                childItems.Add().Field("padding").Editor(editor => editor.NumericTextBox().Step(10).Min(1).Max(900));
            });
        })
        .Events(ev => ev.Save("saveHandler"))
        )
</div>

@section scripts {
    <script>
    function iconTemplate(data) {
        return `${kendo.ui.icon(data.value)}`;
    }

    function fontTemplate(data) {
        var propertyGridModel = $("#propertyGrid").data('kendoPropertyGrid').model();
        return `<span class="fontWeight">${propertyGridModel.font["fontWeight"]}</span> <span class="fontFamily">${propertyGridModel.font["fontFamily"]}</span>`;
    }

    function saveHandler(e) {
        var model = e.model;
        var value = e.values ? e.values.value : model.value;

        if (model.field == 'fontWeight') {
            $('.fontWeight').text(value);
        } else if (model.field == 'fontFamily') {
            $('.fontFamily').text(value);
        }
    }

    $(document).on("kendoReady", function () {
        var propertyGrid = $("#propertyGrid").data("kendoPropertyGrid");

        $("#toggle-details").on("click", function () {
            propertyGrid.toggleDetails();
        });

        $("#toggle-group").on("click", function () {
            var selectedGroup = $("#propertyGrid .k-table-group-row.k-selected");
            if (selectedGroup.length > 0) {
                propertyGrid.toggleGroup(selectedGroup);
            } else {
                kendo.alert("Please select a group.");
            }
        });

        $("#toggle-item").on("click", function () {
            var selectedItem = $("#propertyGrid .k-treelist-group.k-selected");
            if (selectedItem.length > 0) {
                propertyGrid.toggleItem(selectedItem);
            } else {
                kendo.alert("Please select an item with nested properties.");
            }
        });

        $("#select-property").on("click", function () {
            var value = $('#newValue').val();
            var cell;

            if (propertyGrid.grouped) {
                cell = $('.k-table-row:not(".k-table-group-row")').eq(value).find('td:eq(2)')
            } else {
                cell = $("#propertyGrid tbody>tr:nth(" + value + ") td:nth-child(2)")
            }
            propertyGrid.selectItem(cell);
        });

        $("#edit-property").on("click", function () {
            var value = $('#edit-value').val();
            var cell;
            if (propertyGrid.grouped) {
                cell = $('.k-table-row:not(".k-table-group-row")').eq(value).find('td:eq(2)');
            } else {
                cell = $("#propertyGrid tbody>tr:nth(" + value + ") td:nth-child(2)");
            }
            propertyGrid.edit(cell);
        });

        $("#getModel").on("click", function () {
            kendo.alert(JSON.stringify(propertyGrid.model()));
        });
    });
    </script>
}

<style>
    #propertyGrid {
        width: 70%;
    }

    @@media (max-width: 1038px) {
        #propertyGrid {
            width: 100%;
        }
    }
</style>