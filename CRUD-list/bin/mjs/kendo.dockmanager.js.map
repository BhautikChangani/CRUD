{"version":3,"file":"kendo.dockmanager.js","names":["__meta__","id","name","category","description","depends","$","undefined$1","kendo","window","Widget","ui","NS","extend","percentageUnitsRegex","DOCK_MANAGER_TOOLBAR","isPlainObject","TOOLBAR_TEMPLATE","KSTATIC_PANE","KPANE_TABBED","SPLITTER","KSPLITBAR","PANE_SIZING_PROP","HORIZONTAL","VERTICAL","KHIDDEN","KBUTTON","MAX_NUMBER_VALUE","Number","MAX_SAFE_INTEGER","KPANE","KPANES_CONTAINER","KPANE_ACTIONS","KDOCK_INDICATOR","KDOCK_NAVIGATOR","KDOCK_PREVIEW","KSELECTED","KACTIVE","KTABSTRIP","KSPLITBAR_DRAGGABLE","SPLIT","TAB","HEIGHT","WIDTH","TOP","BOTTOM","LEFT","RIGHT","MIDDLE","CLICK","PIN","UNPIN","UNSHIFT","PANE","paneSelector","uid","attr","unpinnedResizeSplitbar","UID_ATTR","INDICATOR_ATTR","ACTION_ATTR","INDICATOR_TEMPLATE","NAVIGATOR_TEMPLATE","CLOSE","DOCK","INNER_DOCK","RESIZE","DRAG","DRAGSTART","DRAGEND","isPercentageSize","size","test","DockSplitter","init","element","options","that","this","fn","call","_marker","guid","substring","addClass","orientation","_initPanes","_initResizable","notify","panes","events","paneElements","children","panesCount","length","sizedPanes","i","paneElement","eq","pane","css","collapsed","splitter","insertAfter","push","pop","markerAttribute","_resizable","Resizable","handle","clickMoveClick","invalidClass","resizeend","find","remove","resize","e","delta","splitterBarIndex","_getElementIndex","currentTarget","splitterBar","rtlModifier","support","isRtl","x","y","leftPane","rightPane","_dragSplitterBar","trigger","start","_onResizeStart","bind","_getAdjacentPanes","leftPaneNewSize","computedSize","isLeftPaneSizeInBounds","min","max","panesWithoutSize","_getPaneElements","filter","style","canResizeBothPanes","_resizePane","leftPaneIndex","rightPaneIndex","leftPaneELement","_getPaneElement","rightPaneELement","_getPane","leftPaneSize","_getPaneOffsetSize","rightPaneSize","totalPaneSize","splitterSize","_getElementClientSize","getPixelSize","paneSize","_calculatePixelSize","leftPaneMaxSize","rightPaneMaxSize","_getAdjacentPanesMaxSize","rightMaxPixelSize","leftMaxPixelSize","index","collapsible","constrainedSize","value","Math","newSize","toPercentages","parseFloat","toPixel","_setPaneSize","_allExpandedPanesHaveSize","expandedPanes","paneIndex","_getPaneSizes","containerSize","numericSize","_getElementOffsetSize","rect","getBoundingClientRect","width","height","_getElementSize","sizeType","_getPaneIndex","indexOf","leftPaneMinSize","leftPaneMaxPixelSize","rightPaneMinSize","rightPaneMaxPixelSize","stopPropagation","_addResizeOverlays","_addResizeOverlay","overlay","append","Array","from","hasClass","childrenSelector","parent","matches","destroy","off","empty","DockManager","panesContainer","appendTo","_processPanes","rootPane","_refreshToolbar","_createPane","_bindEvents","_initNavigator","_initUnpinnedResizable","type","paneDefaults","visible","closeable","actions","icon","shouldAdd","unpinnable","unpinned","minimizable","maximizable","indicators","top","left","transform","previewTop","previewLeft","rotate","hoveredPaneHeight","draggedPaneHeight","hoveredPaneWidth","draggedPaneWidth","togglePane","_getPaneById","_togglePane","removePane","_removePane","getOptions","setOptions","currentOptions","deepExtend","_unpinnedResizable","unpinnedContainer","containerWidth","on","_toolbarButtonClick","_hideUnpinnedPanes","_pinPaneClick","_closePane","_displayDockPreview","_hideDockPreview","currentlyOpened","unpinnedContainerVisible","is","_toolbar","removeClass","itemUid","preventDefault","_showUnpinnedPane","paneUid","toolbarWidth","outerWidth","_findPaneByUid","hasUnpinnedSize","unpinnedSize","button","isTabbed","action","closest","isUnpinned","parentPane","parentUid","eventData","_refreshRootPane","toggleClass","event","splice","_shouldHideParent","some","_refreshPane","parentElement","_extendPane","forEach","childPane","j","subItem","unpinnedPanes","_unpinnedPanes","unpinnedPannesContainer","insertBefore","prepend","html","renderButton","fillMode","_paneHeader","wrapper","refresh","rootPaneElement","_createSplitPane","splitterElement","splitterOptions","paneOptions","_createUnpinnedPane","_updatePaneSize","ev","_createTabPane","tabStripElement","tabContainer","selectedPane","selected","tab","title","contentElement","_addActions","kendoTabStrip","animation","_createContentPane","content","template","data","isUnnpinned","actionsContainer","string","charAt","toUpperCase","slice","result","concat","header","tabHeader","found","prop","params","navigatorDraggable","Draggable","autoScroll","hint","actionsHtml","_getActionButtons","hintTemplate","dragstart","_dragStart","dragend","_dragEnd","drag","_drag","target","draggedPane","_displayGlobalIndicators","draggableEvent","hoveredIndicator","hide","_updateLayout","_showHiddenPanes","hoveredPane","currentPane","elementUnderCursor","navigator","currentPaneUid","prevPaneUid","position","dockable","innerDock","_showTab","_showPane","tabstrip","show","activateTab","splitbar","siblings","_hideDraggedPane","draggedElement","_hideTab","_hidePane","prevElement","prev","nextElement","next","isActive","buttons","container","each","_","clone","indicator","isGlobalIndicator","indicatorName","indicatorUid","indicatorData","previewElement","containerHeight","outerHeight","existingPreview","preview","location","draggedPaneParent","draggedPaneIndex","_tabDock","_splitDock","_adjustSiblingSizes","targetPane","isGlobalDock","targetPaneParent","targetPaneIndex","dimension","newParentPane","unshift","_getSiblings","parentSize","draggedPaneSize","newParentSize","noSizePanes","freeSpace","_calculateNewSize","noSizePane","proportion","noUnitSize","unit","replace","p","plugin","jQuery","kendo$1"],"sources":["kendo.dockmanager.js"],"mappings":"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","sourcesContent":["import './kendo.core.js';\nimport './kendo.splitter.js';\nimport './kendo.tabstrip.js';\nimport './kendo.window.js';\nimport './kendo.html.button.js';\nimport './kendo.resizable.js';\nimport './kendo.draganddrop.js';\n\nconst __meta__ = {\n    id: \"dockManager\",\n    name: \"DockManager\",\n    category: \"web\",\n    description: \"The DockManager widget represents a layout component that allows users to achieve custom layouts by docking panes.\",\n    depends: [\"core\", \"splitter\", \"tabstrip\", \"window\", \"html.button\"]\n};\n\n(function($, undefined$1) {\n    const kendo = window.kendo,\n        Widget = kendo.ui.Widget,\n        NS = \".kendoDockManager\",\n        ui = kendo.ui,\n        extend = $.extend,\n        pxUnitsRegex = /^\\d+(\\.\\d+)?px$/i,\n        percentageUnitsRegex = /^\\d+(\\.\\d+)?%$/i,\n        isPlainObject = $.isPlainObject,\n        DOCK_MANAGER = \"k-dock-manager\",\n        DOCK_MANAGER_TOOLBAR = \"k-dock-manager-toolbar\",\n        TOOLBAR_TEMPLATE = `<div class=\"${DOCK_MANAGER_TOOLBAR} k-toolbar-left k-toolbar k-toolbar-md\"></div>`,\n        TOOLBAR_BUTTON = \"k-toolbar-button\",\n        SEPARATOR = `<div class=\"k-separator k-separator-horizontal\"></div>`,\n        KSTATIC_PANE = \"k-pane-static\",\n        KKPINNED_PANE = \"k-pane-pinned\",\n        KPANE_TABBED = \"k-pane-tabbed\",\n        SPLITTER = \"k-splitter\",\n        KSPLITBAR = \"k-splitbar\",\n        SPLITTER_FLEX = \"k-splitter-flex\",\n        DOCK_SPLITTER = \"k-dock-manager-splitter\",\n        KUNPINNED_CONTAINER = \"k-dock-manager-unpinned-container\",\n        PANE_SIZING_PROP = \"flex-basis\",\n        HORIZONTAL = \"horizontal\",\n        VERTICAL = \"vertical\",\n        KHIDDEN = \"k-hidden\",\n        KBUTTON = \"k-button\",\n        MAX_NUMBER_VALUE = Number.MAX_SAFE_INTEGER,\n        KPANE = \"k-pane\",\n        KPANE_FLEX = \"k-pane-flex\",\n        KPANES_CONTAINER = \"k-dock-manager-pane-container\",\n        KPANE_SCROLLABLE = \"k-pane-scrollable\",\n        KPANE_ACTIONS = \"k-pane-actions\",\n        KDOCK_INDICATOR = \"k-dock-indicator\",\n        KDOCK_NAVIGATOR = \"k-dock-navigator\",\n        KDOCK_PREVIEW = \"k-docking-preview\",\n        KSELECTED = \"k-selected\",\n        KACTIVE = \"k-active\",\n        KTABSTRIP = \"k-tabstrip\",\n        KSPLITBAR_DRAGGABLE = \"k-splitbar-draggable\",\n        SPLIT = \"split\",\n        TAB = \"tab\",\n        CONTENT = \"content\",\n        HEIGHT = \"height\",\n        WIDTH = \"width\",\n        TOP = \"top\",\n        BOTTOM = \"bottom\",\n        LEFT = \"left\",\n        RIGHT = \"right\",\n        MIDDLE = \"middle\",\n        CLICK = \"click\",\n        PIN = \"pin\",\n        UNPIN = \"unpin\",\n        UNSHIFT = \"unshift\",\n        PUSH = \"push\",\n        PANE = `<div class=\"${KPANE} ${KPANE_FLEX} ${KSTATIC_PANE}\"></div>`,\n        paneSelector = uid => `.${KPANE}[${kendo.attr(\"uid\")}=\"${uid}\"]`,\n        buttonTextTemplate = text => `<span class=\"k-button-text\">${text}</span>`,\n        contentPaneTemplate = data => `<div class=\"${KPANE_SCROLLABLE}\">\n                                            <div class=\"k-pane-header\">\n                                                <span class=\"k-pane-title\">${data.title}</span>\n                                                <div class=\"${KPANE_ACTIONS}\"></div>\n                                            </div>\n                                            <div class=\"k-pane-content\">${data.content}</div>\n                                        </div>`,\n        tabTemplate = title => `<li><span class=\"k-link\">${title}</span></li>`,\n        unpinnedResizeSplitbar = `<div class=\"k-splitbar k-splitbar-horizontal ${KSPLITBAR_DRAGGABLE}-horizontal\">\n                                    <div class=\"k-resize-handle\"></div>\n                                </div>`,\n        UID_ATTR = kendo.attr(\"uid\"),\n        INDICATOR_ATTR = kendo.attr(\"indicator\"),\n        ACTION_ATTR = kendo.attr(\"action\"),\n        hintTemplate = pane => `<div class=\"k-tooltip k-tooltip-primary\">\n                                    <div class=\"k-tooltip-content\">${pane.title}</div>\n                                </div>`,\n        INDICATOR_TEMPLATE = `<div class=\"${KDOCK_INDICATOR}\">\n                        <span class=\"k-svg-icon k-icon-xl k-svg-i-position-top\">\n                        <svg aria-hidden=\"true\" focusable=\"false\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\">\n                            <path d=\"M480 448V32H32v448h448v-32zm-416 0V64h384v384H64zM96 96h320v96H96z\"></path>\n                        </svg>\n                        </span>\n                    </div>`,\n        NAVIGATOR_TEMPLATE = `<div class=\"${KDOCK_NAVIGATOR}\" style=\"position: relative;\">\n                                <div class=\"k-dock-indicator k-dock-indicator-top\" ${INDICATOR_ATTR}=\"top\">\n                                <span class=\"k-svg-icon k-icon-xl k-svg-i-position-top\">\n                                    <svg aria-hidden=\"true\" focusable=\"false\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\">\n                                        <path d=\"M480 448V32H32v448h448v-32zm-416 0V64h384v384H64zM96 96h320v96H96z\"></path>\n                                    </svg>\n                                </span>\n                                </div>\n                                <div class=\"k-dock-indicator k-dock-indicator-right\" ${INDICATOR_ATTR}=\"right\">\n                                <span class=\"k-svg-icon k-icon-xl k-svg-i-position-right\">\n                                    <svg aria-hidden=\"true\" focusable=\"false\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\">\n                                        <path d=\"M64 480h416V32H32v448h32zm0-416h384v384H64V64zm256 32h96v320h-96z\"></path>\n                                    </svg>\n                                </span>\n                                </div>\n                                <div class=\"k-dock-indicator k-dock-indicator-bottom\" ${INDICATOR_ATTR}=\"bottom\">\n                                <span class=\"k-svg-icon k-icon-xl k-svg-i-position-bottom\">\n                                    <svg aria-hidden=\"true\" focusable=\"false\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\">\n                                        <path d=\"M32 64v416h448V32H32v32zm416 0v384H64V64h384zM96 320h320v96H96z\"></path>\n                                    </svg>\n                                </span>\n                                </div>\n                                <div class=\"k-dock-indicator k-dock-indicator-left\" ${INDICATOR_ATTR}=\"left\">\n                                <span class=\"k-svg-icon k-icon-xl k-svg-i-position-left\">\n                                    <svg aria-hidden=\"true\" focusable=\"false\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\">\n                                        <path d=\"M448 32H32v448h448V32h-32zm0 416H64V64h384v384zM96 96h96v320H96z\"></path>\n                                    </svg>\n                                </span>\n                                </div>\n                                <div class=\"k-dock-indicator k-dock-indicator-middle\" ${INDICATOR_ATTR}=\"middle\">\n                                <span class=\"k-svg-icon k-icon-xl k-svg-i-window\">\n                                    <svg aria-hidden=\"true\" focusable=\"false\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\">\n                                        <path d=\"M96 96v320h320V96H96zm288 288H128V192h256v192z\"></path>\n                                    </svg>\n                                </span>\n                                </div>\n                            </div>`,\n        SPLITBAR = (splitter) => $(`<div class=\"${KSPLITBAR} ${KSPLITBAR}-${splitter.options.orientation} ${KSPLITBAR_DRAGGABLE}-${splitter.options.orientation}\" ${kendo.attr(\"marker\")}=\"${splitter._marker}\" >\n                        <div class=\"k-resize-handle\"></div>\n                    </div>`),\n        CLOSE = \"close\",\n        DOCK = \"dock\",\n        INNER_DOCK = \"innerDock\",\n        RESIZE = \"resize\",\n        DRAG = \"drag\",\n        DRAGSTART = \"dragStart\",\n        DRAGEND = \"dragEnd\",\n        CHANGE = \"change\";\n\n    function capitalizeFirstLetter(string) {\n        return string.charAt(0).toUpperCase() + string.slice(1);\n    }\n\n    function isPercentageSize(size) {\n        return percentageUnitsRegex.test(size);\n    }\n\n    function isPixelSize(size) {\n        return pxUnitsRegex.test(size) || /^\\d+$/.test(size);\n    }\n\n    function isFluid(size) {\n        return !isPercentageSize(size) && !isPixelSize(size);\n    }\n\n    function calculateSize(size, total) {\n        let output = parseInt(size, 10);\n\n        if (isPercentageSize(size)) {\n            output = Math.floor(output * total / 100);\n        }\n\n        return output;\n    }\n\n    function toPercentages(value) {\n        return `${value}%`;\n    }\n\n    function toPixel(value ) {\n        return kendo.parseFloat(value) + \"px\";\n    }\n\n    function percentage(partialValue, totalValue) {\n        return (100 * partialValue) / totalValue;\n    }\n\n    function clamp(value, min, max) {\n        return Math.min(max, Math.max(min, value));\n    }\n\n    const DockSplitter = Widget.extend({\n        init: function(element, options) {\n            const that = this;\n\n            Widget.fn.init.call(that, element, options);\n            options = $.extend(true, {}, options);\n            that._marker = kendo.guid().substring(0, 8);\n            that.element.addClass(`${SPLITTER} ${SPLITTER_FLEX} ${SPLITTER}-${options.orientation} ${DOCK_SPLITTER}`);\n            that._initPanes();\n            that._initResizable();\n            kendo.notify(that);\n        },\n\n        options: {\n            orientation: \"horizontal\",\n            panes: []\n        },\n\n        events: [\n            RESIZE\n        ],\n\n        _initPanes: function() {\n            const that = this;\n            const paneElements = that.element.children();\n            const panesCount = paneElements.length;\n            const orientation = that.options.orientation;\n            const markerAttribute = kendo.attr(\"marker\");\n            const sizedPanes = [];\n\n            for (let i = 0; i < panesCount; i++) {\n                const paneElement = paneElements.eq(i);\n                let pane = that.options.panes[i];\n\n                if (!pane) {\n                    pane = that.options.panes[i] = {};\n                }\n\n                pane.size = pane.size || \"auto\";\n                paneElement.attr(kendo.attr(\"uid\"), pane.uid)\n                            .attr(\"role\", \"group\")\n                            .css(\"flex-basis\", pane.size)\n                            .addClass();\n\n                if (pane.collapsed) {\n                    pane.css(\"display\", \"none\");\n                }\n\n                if (i < panesCount - 1 && !that.options.panes[i + 1].collapsed) {\n                    let splitbar = SPLITBAR(that);\n\n                    splitbar.insertAfter(paneElement);\n                }\n\n                if (pane.size) {\n                    sizedPanes.push(paneElement);\n                }\n            }\n\n            if (sizedPanes.length === 1 && panesCount > 1) {\n                sizedPanes.pop().addClass(KSTATIC_PANE);\n            }\n        },\n\n        _initResizable: function() {\n            const that = this;\n            const orientation = that.options.orientation;\n            const markerAttribute = kendo.attr(\"marker\");\n\n            that._resizable = new kendo.ui.Resizable(that.element, {\n                orientation: orientation,\n                handle: `[${markerAttribute}=${that._marker}].${KSPLITBAR_DRAGGABLE}-${orientation} `,\n                clickMoveClick: that.options.clickMoveClick,\n                invalidClass: \"k-restricted-size-\" + orientation,\n                resizeend: function() {\n                    that.element.find(\".k-splitter-overlay\").remove();\n                },\n                resize: function(e) {\n                    const axis = orientation === HORIZONTAL ? 'x' : 'y';\n                    let delta;\n                    const splitterBarIndex = that._getElementIndex(e.currentTarget, `.${KSPLITBAR}`);\n                    const splitterBar = e.currentTarget;\n\n                    if (orientation === HORIZONTAL) {\n                        const rtlModifier = kendo.support.isRtl(that.element) ? -1 : 1;\n                        delta = e.x.delta * rtlModifier;\n                    } else {\n                        delta = e.y.delta;\n                    }\n\n                    const { leftPane, rightPane } = that._dragSplitterBar(splitterBar, splitterBarIndex, delta);\n                    that.trigger(RESIZE, { leftPane: leftPane, rightPane: rightPane });\n                },\n                start: that._onResizeStart.bind(that)\n            });\n\n        },\n\n        _dragSplitterBar: function(splitterBar, splitterBarIndex, delta) {\n            const that = this;\n            const { leftPane, rightPane } = that._getAdjacentPanes(splitterBar, splitterBarIndex);\n\n            const leftPaneNewSize = leftPane.computedSize + delta;\n            const isLeftPaneSizeInBounds = leftPaneNewSize > leftPane.min && leftPaneNewSize < leftPane.max;\n\n            const panesWithoutSize = that._getPaneElements().filter(x => !x.style[PANE_SIZING_PROP]);\n            const canResizeBothPanes = (leftPane.size || rightPane.size) && panesWithoutSize.length > 1;\n\n            if ((leftPane.size && rightPane.size) || canResizeBothPanes) {\n                if (isLeftPaneSizeInBounds) {\n                    that._resizePane(leftPane, delta);\n                    that._resizePane(rightPane, -delta);\n                }\n            } else if (rightPane.size) {\n                that._resizePane(rightPane, -delta);\n            } else {\n                that._resizePane(leftPane, delta);\n            }\n            return { leftPane, rightPane };\n        },\n\n        _getAdjacentPanes: function(splitterBar, splitterBarIndex) {\n            const that = this;\n            const leftPaneIndex = splitterBarIndex;\n            const rightPaneIndex = splitterBarIndex + 1;\n\n            const leftPaneELement = that._getPaneElement(leftPaneIndex);\n            const rightPaneELement = that._getPaneElement(rightPaneIndex);\n\n            const leftPane = that._getPane(leftPaneIndex);\n            const rightPane = that._getPane(rightPaneIndex);\n\n            const leftPaneSize = that._getPaneOffsetSize(leftPaneIndex);\n            const rightPaneSize = that._getPaneOffsetSize(rightPaneIndex);\n\n            const totalPaneSize = leftPaneSize + rightPaneSize;\n            const splitterSize = that._getElementClientSize(that.element, that.options.orientation);\n            const getPixelSize = paneSize => that._calculatePixelSize(paneSize, splitterSize);\n\n            const { leftPaneMaxSize, rightPaneMaxSize } = that._getAdjacentPanesMaxSize(leftPaneIndex, rightPaneIndex);\n            const rightMaxPixelSize = getPixelSize(rightPane && rightPane.max);\n            const leftMaxPixelSize = getPixelSize(leftPane && leftPane.max);\n\n            return {\n                leftPane: {\n                    index: leftPaneIndex,\n                    computedSize: leftPaneSize,\n                    min: getPixelSize(leftPane && leftPane.min) || ( rightMaxPixelSize ? totalPaneSize - rightMaxPixelSize : 0 ) || 0,\n                    max: leftPaneMaxSize,\n                    size: leftPaneELement.style[PANE_SIZING_PROP],\n                    collapsible: leftPane && leftPane.collapsible,\n                    uid: leftPane.uid\n                },\n                rightPane: {\n                    index: rightPaneIndex,\n                    computedSize: rightPaneSize,\n                    min: getPixelSize(rightPane && rightPane.min) || (leftMaxPixelSize ? totalPaneSize - leftMaxPixelSize : 0) || 0,\n                    max: rightPaneMaxSize,\n                    size: rightPaneELement.style[PANE_SIZING_PROP],\n                    collapsible: rightPane && rightPane.collapsible,\n                    uid: rightPane.uid\n                }\n            };\n        },\n\n        _resizePane: function(pane, delta) {\n            const that = this;\n            const constrainedSize = clamp(pane.computedSize + delta, pane.min, pane.max);\n            let newSize = \"\";\n\n            if (isPercentageSize(pane.size)) {\n                const splitterSize = that._getElementClientSize(that.element, that.options.orientation);\n                newSize = toPercentages(100 * constrainedSize / splitterSize);\n            } else {\n                newSize = toPixel(constrainedSize);\n            }\n            pane.size = newSize;\n            that._setPaneSize(pane.index, newSize);\n        },\n\n        _allExpandedPanesHaveSize: function() {\n            const that = this;\n            const expandedPanes = that.options.panes.filter(x=> !x.collapsed);\n\n            if (expandedPanes.length) {\n                return expandedPanes.filter(x=> x.size).length;\n            }\n\n            return false;\n        },\n\n        _setPaneSize: function(paneIndex, size) {\n            const that = this;\n            const paneElement = that._getPaneElement(paneIndex);\n\n            if (!paneElement) {\n                return;\n            }\n\n            if (!that._allExpandedPanesHaveSize()) {\n                $(paneElement).addClass(KSTATIC_PANE);\n            }\n\n            paneElement.style[PANE_SIZING_PROP] = size;\n        },\n\n        _getPaneSizes: function(paneIndex) {\n            const that = this;\n            const splitterSize = that._getElementClientSize(that.element, that.options.orientation);\n            const pane = that._getPane(paneIndex);\n            const paneSize = that._getPaneOffsetSize(paneIndex);\n            const paneMinSize = pane && pane.min ? that._calculatePixelSize(pane.min, splitterSize) : 0;\n            const paneMaxSize = pane && pane.max ? that._calculatePixelSize(pane.max, splitterSize) : MAX_NUMBER_VALUE;\n\n            return {\n                size: paneSize,\n                min: paneMinSize,\n                max: paneMaxSize\n            };\n        },\n\n        _calculatePixelSize: function(size, containerSize) {\n            let numericSize = kendo.parseFloat(size);\n\n            if (isPercentageSize(size)) {\n                numericSize = (containerSize * numericSize / 100);\n            }\n\n            return numericSize;\n        },\n\n        _getPaneOffsetSize: function(paneIndex) {\n            const that = this;\n            const paneElement = that._getPaneElement(paneIndex);\n            const size = that._getElementOffsetSize(paneElement, that.options.orientation);\n            return size;\n        },\n\n\n        _getElementOffsetSize: function(element, orientation) {\n            if (!element) {\n                return 0;\n            }\n\n            const rect = element.getBoundingClientRect();\n\n            if (orientation === HORIZONTAL) {\n                return rect.width;\n            } else {\n                return rect.height;\n            }\n        },\n\n        _getElementClientSize: function(element, orientation) {\n            const that = this;\n\n            return that._getElementSize(element, orientation, \"client\");\n        },\n\n        _getElementSize: function(element, orientation, sizeType) {\n            if (!element) {\n                return 0;\n            }\n\n            element = element[0];\n\n            if (orientation === HORIZONTAL) {\n                return element[`${sizeType}Width`];\n            } else {\n                return element[`${sizeType}Height`];\n            }\n        },\n\n        _getPane: function(paneIndex) {\n            const that = this;\n\n            return (that.options.panes || [])[paneIndex];\n        },\n\n        _getPaneIndex: function(pane) {\n            const that = this;\n\n            return that.options.panes.indexOf(pane);\n        },\n\n        _getAdjacentPanesMaxSize: function(leftPaneIndex, rightPaneIndex) {\n            const that = this;\n            const {\n                size: leftPaneSize,\n                min: leftPaneMinSize,\n                max: leftPaneMaxPixelSize\n            } = that._getPaneSizes(leftPaneIndex);\n\n            const {\n                size: rightPaneSize,\n                min: rightPaneMinSize,\n                max: rightPaneMaxPixelSize\n            } = that._getPaneSizes(rightPaneIndex);\n\n            const totalPaneSize = leftPaneSize + rightPaneSize;\n\n            const leftPaneMaxSize = Math.min(leftPaneMaxPixelSize, totalPaneSize - rightPaneMinSize);\n            const rightPaneMaxSize = Math.min(rightPaneMaxPixelSize, totalPaneSize - leftPaneMinSize);\n\n            return {\n                leftPaneMaxSize,\n                rightPaneMaxSize\n            };\n        },\n\n        _onResizeStart: function(e) {\n            const that = this;\n\n            e.stopPropagation();\n\n            const splitterBarIndex = that._getElementIndex(e.currentTarget, `.${SPLITTER}`);\n\n            that._addResizeOverlays(splitterBarIndex);\n        },\n\n        _addResizeOverlays: function(splitterBarIndex) {\n            const that = this;\n\n            that._addResizeOverlay(splitterBarIndex);\n            that._addResizeOverlay(splitterBarIndex + 1);\n        },\n\n        _addResizeOverlay: function(paneIndex) {\n            const that = this;\n            const paneElement = that._getPaneElement(paneIndex);\n\n            if (!paneElement) {\n                return;\n            }\n\n            const overlay = $(`<div class=\"k-splitter-overlay k-overlay\"></div>`);\n\n            $(paneElement).append(overlay);\n        },\n\n\n        _getPaneElement: function(paneIndex) {\n            const that = this;\n            const panes = that._getPaneElements();\n            return panes[paneIndex];\n        },\n\n        _getPaneElements: function() {\n            const that = this;\n            const panes = Array.from(that.element.children() || []).filter(x => $(x).hasClass(\"k-pane\") || $(x).hasClass(\"k-splitter\"));\n            return panes;\n        },\n\n        _getElementIndex: function(element, childrenSelector) {\n            if (!element) {\n                return [].indexOf(element);\n            }\n\n            let children = Array.from(element.parent().children());\n\n            if (childrenSelector) {\n                children = children.filter(x => x.matches(childrenSelector));\n            }\n\n            return Array.from(children).indexOf(element[0]);\n        },\n\n        destroy: function() {\n            const that = this;\n\n            Widget.fn.destroy.call(that);\n\n            that.element.off(NS);\n            that.element.empty();\n\n            that._resizable.destroy();\n            kendo.destroy(that.element);\n        }\n    });\n\n    const DockManager = Widget.extend({\n        init: function(element, options) {\n            const that = this;\n\n            Widget.fn.init.call(that, element, options);\n            options = $.extend(true, {}, options);\n            that.element.addClass(DOCK_MANAGER);\n\n            that.panesContainer = $(`<div class=\"${KPANES_CONTAINER}\" />`).appendTo(that.element);\n            that._processPanes(that.options.rootPane);\n            that._refreshToolbar();\n            that._createPane(that.panesContainer, that.options.rootPane);\n            that._bindEvents();\n            that._initNavigator();\n            that._initUnpinnedResizable();\n\n            kendo.notify(that);\n        },\n\n        events: [\n            CLOSE,\n            PIN,\n            UNPIN,\n            DOCK,\n            INNER_DOCK,\n            RESIZE,\n            DRAG,\n            DRAGSTART,\n            DRAGEND\n        ],\n\n        options: {\n            name: 'DockManager',\n            rootPane: {\n                type: SPLIT,\n                orientation: HORIZONTAL,\n                panes: []\n            }\n        },\n\n        paneDefaults: {\n            visible: true,\n            closeable: true,\n            collapsed: false,\n            size: ''\n        },\n\n        actions: [\n            {\n                name: \"pin\",\n                icon: \"unpin\",\n                shouldAdd: pane => pane.unpinnable && pane.unpinnable.unpinned\n            },{\n                name: \"unpin\",\n                icon: \"pin\",\n                shouldAdd: pane => pane.unpinnable && !pane.unpinnable.unpinned\n            },{\n                name: \"minimize\",\n                icon: \"minimize\",\n                shouldAdd: pane => pane.minimizable\n            },{\n                name: \"maximize\",\n                icon: \"maximize\",\n                shouldAdd: pane => pane.maximizable\n            },{\n                name: \"close\",\n                icon: \"x\",\n                shouldAdd: pane => pane.closeable != false\n            },{\n                name: \"more\",\n                icon: \"more-vertical\",\n                shouldAdd: pane => false //not needed for v1 as currently only 2 actions are available\n            }\n        ],\n\n        indicators: [\n            {\n                name: TOP,\n                top: 0,\n                left: \"50%\",\n                transform: \"translate(-50%, 0)\",\n                previewTop: () => 0,\n                previewLeft: () => 0,\n                rotate: \"0deg\"\n            },{\n                name: BOTTOM,\n                top: \"100%\",\n                left: \"50%\",\n                transform: \"translate(-50%, -100%)\",\n                previewTop: (hoveredPaneHeight, draggedPaneHeight) => hoveredPaneHeight - draggedPaneHeight,\n                previewLeft: () => 0,\n                rotate: \"180deg\"\n            },{\n                name: LEFT,\n                top: \"50%\",\n                left: 0,\n                transform: \"translate(0, -50%)\",\n                previewTop: () => 0,\n                previewLeft: () => 0,\n                rotate: \"270deg\"\n            },{\n                name: RIGHT,\n                top: \"50%\",\n                left: \"100%\",\n                transform: \"translate(-100%, -50%)\",\n                previewTop: () => 0,\n                previewLeft: (hoveredPaneWidth, draggedPaneWidth) => hoveredPaneWidth - draggedPaneWidth,\n                rotate: \"90deg\"\n            },{\n                name: MIDDLE,\n                previewTop: () => 0,\n                previewLeft: () => 0,\n            }\n        ],\n\n        togglePane: function(id) {\n            const that = this,\n            pane = that._getPaneById(that.options.rootPane, \"id\", id);\n\n            if (pane != undefined$1) {\n                that._togglePane(pane);\n            }\n        },\n\n        removePane: function(id) {\n            const that = this;\n            const pane = that._getPaneById(that.options.rootPane, \"id\", id);\n\n            if (pane != undefined$1) {\n                that._removePane(pane);\n            }\n        },\n\n        getOptions: function() {\n            const that = this;\n            return that.options;\n        },\n\n        setOptions: function(options) {\n            const that = this;\n            let currentOptions = that.getOptions();\n            kendo.deepExtend(currentOptions, options);\n\n            that.destroy();\n            that.element.empty();\n\n            that.init(that.element, currentOptions);\n\n        },\n\n        _initUnpinnedResizable: function() {\n            const that = this;\n\n            that._unpinnedResizable = new kendo.ui.Resizable(that.unpinnedContainer, {\n                orientation: HORIZONTAL,\n                handle: \".k-splitbar-horizontal.k-splitbar-draggable-horizontal\",\n                resize: function(e) {\n                    const delta = e.x.delta;\n                    const containerWidth = that.unpinnedContainer.width();\n\n                    that.unpinnedContainer.width(containerWidth + delta);\n                }\n            });\n        },\n\n        _bindEvents: function() {\n            const that = this;\n\n            that.element.on(CLICK + NS, `.k-dock-manager-toolbar .${KBUTTON}`, that._toolbarButtonClick.bind(that));\n            that.element.on(CLICK + NS, `.${KPANES_CONTAINER}`, that._hideUnpinnedPanes.bind(that));\n            that.element.on(CLICK + NS, `.${KBUTTON}[${ACTION_ATTR}=\"pin\"], .${KBUTTON}[${ACTION_ATTR}=\"unpin\"]`, that._pinPaneClick.bind(that));\n            that.element.on(CLICK + NS, `.${KBUTTON}[${ACTION_ATTR}=\"close\"]`, that._closePane.bind(that));\n            that.element.on(\"mouseenter\" + NS, `.${KDOCK_INDICATOR}`, that._displayDockPreview.bind(that));\n            that.element.on(\"mouseleave\" + NS, `.${KDOCK_INDICATOR}`, that._hideDockPreview.bind(that));\n        },\n\n        _hideUnpinnedPanes: function(e) {\n            const that = this;\n            const unpinnedPanes = that.unpinnedContainer.find(`.${KPANE}`);\n            const currentlyOpened = unpinnedPanes.filter(\":visible\");\n            const unpinnedContainerVisible = that.unpinnedContainer.is(\":visible\");\n\n            if (currentlyOpened && unpinnedContainerVisible) {\n                that._toolbar.find(`.${KSELECTED}`).removeClass(KSELECTED);\n                that.unpinnedContainer.addClass(KHIDDEN);\n                return;\n            }\n        },\n\n        _toolbarButtonClick: function(e) {\n            const that = this;\n            const itemUid = $(e.currentTarget).attr(UID_ATTR);\n            const unpinnedPanes = that.unpinnedContainer.find(`.${KPANE}`);\n            const currentlyOpened = unpinnedPanes.filter(\":visible\");\n            const unpinnedContainerVisible = that.unpinnedContainer.is(\":visible\");\n\n            e.preventDefault();\n            that._toolbar.find(`.${KBUTTON}`).removeClass(KSELECTED);\n\n            if (currentlyOpened.attr(UID_ATTR) === itemUid && unpinnedContainerVisible) {\n                that.unpinnedContainer.addClass(KHIDDEN);\n                return;\n            }\n\n            that._showUnpinnedPane(itemUid);\n        },\n\n        _showUnpinnedPane: function(paneUid) {\n            const that = this;\n            const toolbarWidth = that._toolbar.outerWidth();\n            const pane = that._findPaneByUid(paneUid);\n            const hasUnpinnedSize = pane.unpinnable.unpinnedSize;\n\n            that.unpinnedContainer.removeClass(KHIDDEN).css({ left: `${toolbarWidth}px` });\n            that.unpinnedContainer.find(`.${KPANE}`).addClass(KHIDDEN);\n            that.unpinnedContainer.find(paneSelector(paneUid)).removeClass(KHIDDEN);\n\n            if (hasUnpinnedSize) {\n                that.unpinnedContainer.css({ width: `${pane.unpinnable.unpinnedSize}` });\n            }\n\n            that._toolbar.find(`.${KBUTTON}[${UID_ATTR}=\"${paneUid}\"]`).addClass(KSELECTED);\n        },\n\n        _pinPaneClick: function(e) {\n            const that = this;\n            const button = $(e.currentTarget);\n            const isTabbed = button.parent().is(\"li\");\n            const action = button.attr(ACTION_ATTR);\n            const paneElement = isTabbed ? button.parent() : $(e.currentTarget).closest(`.${KPANE}`);\n            const pane = that._findPaneByUid(paneElement.attr(UID_ATTR));\n            const isUnpinned = pane.unpinnable.unpinned;\n            const parentPane = that._findPaneByUid(pane.parentUid);\n            const parentPaneElement = that.panesContainer.find(`.${KPANE}[${UID_ATTR}=\"${parentPane.uid}\"], .${SPLITTER}[${UID_ATTR}=\"${parentPane.uid}\"]`);\n            const eventData = { pane: pane, paneElement: paneElement };\n\n            if (isUnpinned) {\n                kendo.destroy(paneElement);\n                paneElement.remove();\n            }\n\n            pane.unpinnable.unpinned = action === PIN ? false : true;\n            that._refreshRootPane();\n            that.unpinnedContainer.toggleClass(KHIDDEN, action === PIN);\n\n            if (action === \"pin\") {\n                that.trigger(PIN, eventData);\n                return;\n            }\n\n            that.trigger(UNPIN, eventData);\n            that._showUnpinnedPane(pane.uid);\n        },\n\n        _closePane: function(e) {\n            const that = this;\n            const button = $(e.currentTarget);\n            const isTabbed = button.parent().is(\"li\");\n            const paneElement = isTabbed ? button.parent() : $(e.currentTarget).closest(`.${KPANE}`);\n            const pane = that._findPaneByUid(paneElement.attr(UID_ATTR));\n            const parentPane = that._findPaneByUid(pane.parentUid);\n            const parentPaneElement = that.panesContainer.find(`.${KPANE}[${UID_ATTR}=\"${parentPane.uid}\"], .${SPLITTER}[${UID_ATTR}=\"${parentPane.uid}\"]`);\n            const paneIndex = parentPane.panes.indexOf(pane);\n            const eventData = { pane: pane, paneElement: paneElement, event: e };\n\n            if (that.trigger(CLOSE, eventData)) {\n                e.preventDefault();\n            }\n\n            if (pane.unpinnable && pane.unpinnable.unpinned) {\n                that.unpinnedContainer.addClass(KHIDDEN);\n            }\n\n            parentPane.panes.splice(paneIndex, 1);\n\n            if (that._shouldHideParent(parentPane)) {\n                parentPane.visible = false;\n            }\n\n            that._refreshRootPane();\n        },\n\n        _shouldHideParent: function(pane) {\n            const that = this,\n            parent = that._findPaneByUid(pane.parentUid);\n\n            if (pane.panes.length == 0) {\n                if (pane.type == TAB && parent.panes.length == 1) {\n                    parent.panes.splice(0,1);\n                    parent.visible = false;\n                }\n                return true;\n            }\n\n            if (pane.panes.length == 1 &&\n                pane.panes[0].type == TAB &&\n                !pane.panes.some(x => x.visible)) {\n                return true;\n            }\n\n            return false;\n        },\n\n        _refreshPane: function(paneElement, pane) {\n            const that = this;\n            const parentElement = paneElement.parent();\n            const isTabbed = paneElement.is(`.${KPANE_TABBED}`);\n\n            kendo.destroy(paneElement);\n            isTabbed ? paneElement.empty() : paneElement.remove();\n            that._refreshToolbar();\n            that._createPane(isTabbed ? paneElement : parentElement, pane);\n        },\n\n        _processPanes: function(pane) {\n            const that = this;\n            pane.uid = pane.uid || kendo.guid();\n            that._extendPane(pane);\n\n            if (pane.type === SPLIT && !pane.orientation) {\n                pane.orientation = HORIZONTAL;\n            }\n\n            pane.panes.forEach((childPane) => {\n                childPane.parentUid = pane.uid;\n\n                if (childPane.type == CONTENT) {\n                    if (childPane.unpinnable === undefined$1 || childPane.unpinnable === true) {\n                        childPane.unpinnable = {\n                            unpinned: false\n                        };\n                    }\n                    childPane.uid = childPane.uid || kendo.guid();\n                }\n\n                if (childPane.panes && childPane.panes.length) {\n                    that._processPanes(childPane);\n                }\n            });\n        },\n\n        _extendPane: function(pane) {\n            const that = this;\n\n            if (pane.panes) {\n                for (var j = 0; j < pane.panes.length; j++) {\n                    pane.panes.forEach(subItem => {\n                        that._extendPane(subItem);\n                    });\n                }\n            }\n\n            extend(pane, {\n                visible: pane.visible === undefined$1 ? that.paneDefaults.visible : pane.visible,\n                closeable: pane.closeable === undefined$1 ? that.paneDefaults.closeable : pane.closeable,\n                collapsed: pane.collapsed === undefined$1 ? that.paneDefaults.collapsed : pane.collapsed,\n                size: pane.size === undefined$1 ? that.paneDefaults.size : pane.size,\n            });\n        },\n\n        _togglePane: function(pane) {\n            const that = this;\n\n            pane.visible = !pane.visible;\n            that._refreshRootPane();\n        },\n\n        _removePane: function(pane) {\n            const that = this;\n            const parentPane = that._findPaneByUid(pane.parentUid);\n            const paneIndex = parentPane.panes.indexOf(pane);\n            const parentPaneElement = that.panesContainer.find(`[${UID_ATTR}=\"${pane.uid}\"]`).parent();\n\n            parentPane.panes.splice(paneIndex, 1);\n            that._refreshRootPane();\n        },\n\n        _refreshToolbar: function() {\n            const that = this;\n            const unpinnedPanes = that._unpinnedPanes();\n            const unpinnedPannesContainer = $(`<div class=\"${KHIDDEN}\"/>`).addClass(KUNPINNED_CONTAINER);\n\n            if (!that.unpinnedContainer) {\n                that.unpinnedContainer = unpinnedPannesContainer;\n                unpinnedPannesContainer.append(unpinnedResizeSplitbar);\n                unpinnedPannesContainer.insertBefore(that.panesContainer);\n            }\n\n            if (!unpinnedPanes.length) {\n                that._toolbar && that._toolbar.remove();\n                that._toolbar = null;\n                return;\n            }\n\n            if (!that._toolbar) {\n                that._toolbar = that.element.prepend(TOOLBAR_TEMPLATE).find(`.${DOCK_MANAGER_TOOLBAR}`);\n            }\n\n            that._toolbar.empty();\n\n            for (let i = 0; i < unpinnedPanes.length; i++) {\n                const pane = unpinnedPanes[i];\n                const button = $(kendo.html.renderButton({ fillMode: \"flat\", size: \"medium\" }))\n                                .addClass(TOOLBAR_BUTTON)\n                                .append(buttonTextTemplate(that._paneHeader(pane)));\n\n                button.attr(UID_ATTR, pane.uid);\n                that._toolbar.append(button);\n\n                if (i < unpinnedPanes.length - 1) {\n                    that._toolbar.append(SEPARATOR);\n                }\n            }\n        },\n\n        destroy: function() {\n            const that = this;\n\n            Widget.fn.destroy.call(that);\n\n            that.element.off(NS);\n            that.element.empty();\n\n            kendo.destroy(that.wrapper);\n        },\n\n        refresh: function() {\n            const that = this;\n            kendo.destroy(that.unpinnedContainer);\n            that.unpinnedContainer.empty();\n            that._refreshRootPane();\n        },\n\n        _refreshRootPane: function() {\n            const that = this;\n            const rootPaneElement = that.element.find(`[${UID_ATTR}=\"${that.options.rootPane.uid}\"]`);\n\n            that._refreshPane(rootPaneElement, that.options.rootPane);\n        },\n\n        _createSplitPane: function(parentElement, pane) {\n            const that = this;\n            const splitterElement = $(\"<div/>\").attr(UID_ATTR, pane.uid);\n            const splitterOptions = {\n                orientation: pane.orientation || HORIZONTAL,\n                panes: []\n            };\n\n            if (!pane.panes.some(x=>x.visible)) {\n                return;\n            }\n\n            parentElement.append(splitterElement);\n\n            pane.panes.forEach((childPane) => {\n                const paneOptions = {\n                    uid: childPane.uid\n                };\n                const paneElement = $(PANE).removeClass(KSTATIC_PANE);\n\n                if (childPane.unpinnable && childPane.unpinnable.unpinned) {\n                    that._createUnpinnedPane(childPane);\n                    return;\n                }\n\n                if (childPane.size) {\n                    paneOptions.size = childPane.size;\n                }\n\n                if (childPane.visible != undefined$1) {\n                    paneOptions.visible = childPane.visible;\n                }\n\n                if (childPane.visible) {\n                    splitterElement.append(paneElement);\n                    that._createPane(paneElement, childPane);\n                    splitterOptions.panes.push(paneOptions);\n                }\n            });\n\n           pane.splitter = new DockSplitter(splitterElement, splitterOptions); // eslint-disable-line no-new\n           pane.splitter.bind(RESIZE, that._updatePaneSize.bind(that));\n        },\n\n        _updatePaneSize: function(e) {\n            const that = this;\n            const leftPane = that._findPaneByUid(e.leftPane.uid),\n            rightPane = that._findPaneByUid(e.rightPane.uid);\n\n            leftPane.size = e.leftPane.size;\n            rightPane.size = e.rightPane.size;\n            that.trigger(RESIZE, { ev: e, leftPane: leftPane, rightPane: rightPane });\n        },\n\n        _createTabPane: function(parentElement, pane) {\n            const that = this;\n            const tabStripElement = $(\"<div class='k-header'/>\");\n            const tabContainer = $(\"<ul/>\");\n            const tabStripOptions = {\n                animation: false\n            };\n            const selectedPane = (pane.selected === undefined$1 || pane.panes.indexOf(pane.panes[pane.selected]) == -1 || pane.panes[pane.selected].unpinnable.unpinned) ? 0 : pane.selected;\n\n            if (!pane.panes.some(x=>x.visible)) {\n                return;\n            }\n\n            tabStripElement.append(tabContainer);\n            parentElement.append(tabStripElement);\n            parentElement.attr(UID_ATTR, pane.uid);\n            parentElement.addClass(KPANE_TABBED);\n\n            pane.panes.forEach((childPane) => {\n                const tab = $(tabTemplate(that._paneHeader(childPane))).attr(UID_ATTR, childPane.uid);\n                const contentElement = $(\"<div/>\");\n\n                if (childPane.unpinnable && childPane.unpinnable.unpinned) {\n                    that._createUnpinnedPane(childPane);\n                    return;\n                }\n\n                if (childPane.visible) {\n                    that._addActions(tab, childPane);\n                    tabContainer.append(tab);\n                    tabStripElement.append(contentElement);\n                    that._createPane(contentElement, childPane);\n                }\n            });\n\n            $(tabContainer.children()[selectedPane]).addClass(KACTIVE);\n            tabStripElement.kendoTabStrip(tabStripOptions);\n        },\n\n        _createContentPane: function(parentElement, pane) {\n            const that = this;\n            const content = typeof pane.content === \"function\" ? kendo.template(pane.content)({}) : pane.content;\n            const element = $(contentPaneTemplate(extend({}, pane, { title: that._paneHeader(pane), content: content })));\n            const parentPane = that._findPaneByUid(pane.parentUid);\n            const isUnnpinned = pane.unpinnable && pane.unpinnable.unpinned;\n\n\n            if (parentPane && parentPane.type === TAB && !isUnnpinned) {\n                parentElement.append(content);\n                return;\n            }\n\n            parentElement.addClass(KKPINNED_PANE)\n                         .removeClass(KSTATIC_PANE)\n                         .attr(UID_ATTR, pane.uid);\n            that._addActions(element.find(`.${KPANE_ACTIONS}`), pane);\n            parentElement.append(element);\n        },\n\n        _createUnpinnedPane: function(pane) {\n            const that = this;\n            const paneElement = $(PANE).removeClass(KSTATIC_PANE);\n\n            if (that.unpinnedContainer.find(paneSelector(pane.uid)).length) {\n                return;\n            }\n\n            that.unpinnedContainer.prepend(paneElement);\n            that._createContentPane(paneElement, pane);\n        },\n\n        _addActions: function(actionsContainer, pane) {\n            const that = this;\n\n            that.actions.forEach((action) => {\n                if (action.shouldAdd(pane)) {\n                    actionsContainer.append($(kendo.html.renderButton({ fillMode: \"flat\", icon: action.icon })).attr(ACTION_ATTR, action.name));\n                }\n            });\n\n        },\n\n        _createPane: function(parentElement, pane) {\n            const that = this;\n\n            if (pane.id) {\n                parentElement.attr(\"id\", pane.id);\n            }\n\n            return that[\"_create\" + capitalizeFirstLetter(pane.type) + \"Pane\"](parentElement, pane);\n        },\n\n        _unpinnedPanes: function(panes) {\n            const that = this;\n            const options = that.options;\n            let result = [];\n\n            if (!panes) {\n                panes = options.rootPane.panes;\n            }\n\n            panes.forEach((pane) => {\n                if (pane.unpinnable && pane.unpinnable.unpinned) {\n                    result.push(pane);\n                }\n\n                if (pane.panes && pane.panes.length) {\n                    result = result.concat(that._unpinnedPanes(pane.panes));\n                }\n            });\n\n            return result;\n        },\n\n        _paneHeader: function(pane) {\n            const that = this;\n            const parentPane = that._findPaneByUid(pane.parentUid);\n            const isTabbed = parentPane && parentPane.type === \"tab\";\n            let header = pane.header;\n\n            if (isTabbed && pane.tabHeader) {\n                header = pane.tabHeader;\n            }\n\n            if (!header) {\n                return pane.title || \"\";\n            }\n\n            return kendo.template(header)(pane);\n        },\n\n        _findPaneByUid: function(uid, parent) {\n            const that = this;\n            let found;\n\n            parent = parent || that.options.rootPane;\n\n            if (parent.uid === uid) {\n                return parent;\n            }\n\n            parent.panes.forEach((pane) => {\n                if (pane.uid === uid) {\n                    found = pane;\n                    return;\n                }\n\n                if (pane.panes && pane.panes.length) {\n                    const result = that._findPaneByUid(uid, pane);\n\n                    if (result) {\n                        found = result;\n                        return;\n                    }\n                }\n            });\n            return found;\n        },\n\n        _getPaneById: function(pane, prop, value) {\n            const that = this;\n            let found;\n\n            if (pane[prop] == value) {\n                return pane;\n            }\n\n            if (pane.panes) {\n                pane.panes.forEach((childPane) => {\n                    let result = that._getPaneById(childPane, prop, value);\n                    if (result) {\n                        found = result;\n                    }\n                });\n            }\n            return found;\n        },\n\n        _initNavigator: function(params) {\n            const that = this;\n\n            that.navigatorDraggable = new kendo.ui.Draggable(that.element, {\n                autoScroll: true,\n                filter: \".k-pane-header, .k-pane-tabbed .k-tabstrip-item\",\n                hint: function(element) {\n                    const isTabbed = element.is(\"li\");\n                    const paneElement = element.closest(`.${KPANE}`);\n                    const pane = that._findPaneByUid((isTabbed ? element : paneElement).attr(UID_ATTR));\n                    const actionsHtml = isTabbed ? that._getActionButtons(element) : paneElement.find(`.${KPANE_ACTIONS}`).html();\n\n                    return hintTemplate({\n                        width: paneElement.width(),\n                        height: paneElement.height(),\n                        content: pane.content,\n                        title: that._paneHeader(pane),\n                        actions: actionsHtml\n                    });\n                },\n                dragstart: that._dragStart.bind(that),\n                dragend: that._dragEnd.bind(that),\n                drag: that._drag.bind(that)\n            });\n        },\n\n        _dragStart: function(e) {\n            const that = this;\n            const target = $(e.currentTarget);\n            const pane = target.closest(`.${KPANE}`);\n\n            that.draggedPane = {\n                width: pane.width(),\n                height: pane.height(),\n                pane,\n                target\n            };\n\n            that._displayGlobalIndicators();\n\n            that.trigger(DRAGSTART, { pane: that.draggedPane.pane, draggableEvent: e });\n        },\n\n        _dragEnd: function(e) {\n            const that = this;\n            const hoveredIndicator = that.element.find(`.${KDOCK_INDICATOR}:hover`);\n            const eventData = { pane: that.draggedPane.pane, draggableEvent: e };\n\n            if (hoveredIndicator.length) {\n                that.navigatorDraggable.hint.hide();\n                that._updateLayout(hoveredIndicator);\n            }\n\n            that.element.find(`.${KDOCK_INDICATOR}`).remove();\n            that.element.find(`.${KDOCK_PREVIEW}`).remove();\n\n            if (!hoveredIndicator.length) {\n                that._showHiddenPanes();\n            }\n            that.trigger(DRAGEND, eventData);\n            that.hoveredPane = null;\n            that.draggedPane = null;\n        },\n\n        _drag: function(e) {\n            const that = this;\n            const currentPane = $(e.elementUnderCursor).closest(`.${KPANE}[${UID_ATTR}]`);\n            const pane = that._findPaneByUid(currentPane.attr(UID_ATTR));\n            const navigator = $(NAVIGATOR_TEMPLATE);\n            const currentPaneUid = currentPane.attr(UID_ATTR);\n            const prevPaneUid = that.hoveredPane && that.hoveredPane.attr(UID_ATTR);\n            var eventData = { pane: that.draggedPane.pane, draggableEvent: e };\n\n            if (that.trigger(DRAG, eventData)) {\n                e.preventDefault();\n                return;\n            }\n\n            if (currentPaneUid === prevPaneUid) {\n                return;\n            }\n\n            that.hoveredPane = currentPane;\n            that.element.find(`.${KDOCK_NAVIGATOR}`).remove();\n            navigator.css({\n                position: \"absolute\",\n                top: \"50%\",\n                left: \"50%\",\n                transform: \"translate(-50%,-50%)\",\n                \"z-index\": 100008\n            });\n\n            if (pane && pane.dockable && !pane.dockable.innerDock) {\n                navigator.css(\"display\", \"none\");\n            }\n\n            currentPane.append(navigator);\n        },\n\n        _showHiddenPanes: function() {\n            const that = this;\n            const isTabbed = that.draggedPane.pane.is(`.${KPANE_TABBED}`);\n\n            if (isTabbed) {\n                return that._showTab();\n            }\n\n            that._showPane(that.draggedPane.pane);\n        },\n\n        _showTab: function(tab) {\n            if (tab === undefined$1) {\n                return;\n            }\n\n            const that = this;\n            const tabstrip = tab.closest(`.${KTABSTRIP}`).data(\"kendoTabStrip\");\n\n            tab.show();\n            tabstrip.activateTab(tab);\n        },\n\n        _showPane: function(paneElement) {\n            const that = this;\n            const splitbar = paneElement.siblings(`.${KSPLITBAR}:hidden`);\n            paneElement.show();\n            splitbar.show();\n        },\n\n        _hideDraggedPane: function(draggedElement) {\n            const that = this;\n            const isTabbed = draggedElement.is(\"li\");\n\n            if (isTabbed) {\n                return that._hideTab(draggedElement);\n            }\n\n            that._hidePane(draggedElement);\n        },\n\n        _hidePane: function(draggedElement) {\n            const that = this;\n            const paneElement = draggedElement.closest(`.${KPANE}`);\n            const prevElement = paneElement.prev();\n            const nextElement = paneElement.next();\n\n            paneElement.hide();\n\n            if (prevElement.is(`.${KSPLITBAR}`)) {\n                return prevElement.hide();\n            }\n\n            nextElement.hide();\n        },\n\n        _hideTab: function(tab) {\n            const that = this;\n            const isActive = tab.is(`.${KACTIVE}`);\n            const tabstrip = tab.closest(`.${KTABSTRIP}`).data(\"kendoTabStrip\");\n\n            tab.hide();\n\n            if (isActive) {\n                tabstrip.activateTab(\"li:visible:first\");\n            }\n        },\n\n        _getActionButtons: function(paneElement) {\n            const buttons = paneElement.find(\"button\");\n            const container = $(\"<div/>\");\n\n            buttons.each((_, button) => container.append($(button).clone()));\n\n            return container.html();\n        },\n\n        _displayGlobalIndicators: function() {\n            const that = this;\n\n            that.indicators.forEach((indicator) => {\n                const element = $(INDICATOR_TEMPLATE);\n\n                if (indicator.name === \"middle\") {\n                    return;\n                }\n\n                that.element.append(element);\n                element.css({\n                    position: \"absolute\",\n                    \"z-index\": \"100002\",\n                    top: indicator.top,\n                    left: indicator.left,\n                    transform: `${indicator.transform} rotate(${indicator.rotate})`\n                });\n                element.attr(INDICATOR_ATTR, indicator.name);\n            });\n        },\n\n        _displayDockPreview: function(e) {\n            const that = this;\n            const indicator = $(e.currentTarget);\n            const isGlobalIndicator = !indicator.parent().is(`.${KDOCK_NAVIGATOR}`);\n            const indicatorName = indicator.attr(INDICATOR_ATTR);\n            const indicatorUid = indicator.attr(UID_ATTR);\n            const indicatorData = that.indicators.filter(i => i.name === indicatorName)[0];\n            const previewElement = $(`<div class=\"${KDOCK_PREVIEW}\"/>`);\n            const container = isGlobalIndicator ? that.panesContainer : that.hoveredPane;\n            const toolbarWidth = that._toolbar ? that._toolbar.outerWidth() : 0;\n            const containerWidth = container.outerWidth();\n            const containerHeight = container.outerHeight();\n            const existingPreview = indicatorUid && container.find(`.${KDOCK_PREVIEW}[${UID_ATTR}=\"${indicatorUid}\"]`);\n            const uid = kendo.guid();\n            let width = that.draggedPane.width;\n            let height = that.draggedPane.height;\n\n            if (existingPreview && existingPreview.length) {\n                return existingPreview.show();\n            }\n\n            if (indicatorName === MIDDLE) {\n                width = containerWidth;\n                height = containerHeight;\n            }\n\n            if (indicatorName === TOP || indicatorName === BOTTOM) {\n                if (height > containerHeight / 2) {\n                    height = containerHeight / 2;\n                }\n\n                width = containerWidth;\n            }\n\n            if (indicatorName === LEFT || indicatorName === RIGHT) {\n                if (width > containerWidth / 2) {\n                    width = containerWidth / 2;\n                }\n\n                height = containerHeight;\n            }\n\n            const css = {\n                position: \"absolute\",\n                \"z-index\": 100000,\n                top: indicatorData.previewTop(containerHeight, height),\n                left: indicatorData.previewLeft(containerWidth, width) + (isGlobalIndicator ? toolbarWidth : 0),\n                width: width,\n                height\n            };\n\n            previewElement.css(css);\n            previewElement.attr(INDICATOR_ATTR, indicatorData.name)\n                          .attr(UID_ATTR, uid);\n            indicator.attr(UID_ATTR, uid);\n            container.append(previewElement);\n            that.draggedPane.preview = {\n                width,\n                height\n            };\n            that.draggedPane.container = {\n                width: containerWidth,\n                height: containerHeight\n            };\n        },\n\n        _hideDockPreview: function() {\n            const that = this;\n\n            that.element.find(`.${KDOCK_PREVIEW}`).hide();\n        },\n\n        _updateLayout: function(indicator) {\n            const that = this;\n            const isTabbed = that.draggedPane.target.is(\"li\");\n            const isGlobalIndicator = !indicator.parent().is(`.${KDOCK_NAVIGATOR}`);\n            const paneElement = isTabbed ? that.draggedPane.target : that.draggedPane.pane;\n            const hoveredPane = that._findPaneByUid(that.hoveredPane.attr(UID_ATTR));\n            const draggedPane = that._findPaneByUid(paneElement.attr(UID_ATTR));\n            const location = indicator.attr(INDICATOR_ATTR);\n            const draggedPaneParent = that._findPaneByUid(draggedPane.parentUid);\n            const draggedPaneIndex = draggedPaneParent.panes.indexOf(draggedPane);\n            const rootPaneElement = that.element.find(`[${UID_ATTR}=\"${that.options.rootPane.uid}\"]`);\n\n            draggedPaneParent.panes.splice(draggedPaneIndex, 1);\n            location == MIDDLE ? that._tabDock(hoveredPane, draggedPane) : that._splitDock(hoveredPane, draggedPane, location, isGlobalIndicator);\n            that._processPanes(that.options.rootPane);\n            that._adjustSiblingSizes(draggedPane, location, isGlobalIndicator);\n            that._refreshPane(rootPaneElement, that.options.rootPane);\n            location == MIDDLE ?\n                that.trigger(INNER_DOCK, { pane: draggedPane, paneElement: paneElement }) :\n                that.trigger(DOCK, { pane: draggedPane, paneElement: paneElement });\n        },\n\n        _splitDock: function(targetPane, pane, location, isGlobalDock) {\n            const that = this;\n            const targetPaneParent = isGlobalDock ? that.options.rootPane : that._findPaneByUid(targetPane.parentUid);\n            const targetPaneIndex = targetPaneParent.panes.indexOf(targetPane);\n            const action = location === TOP || location === LEFT ? UNSHIFT : PUSH;\n            const paneIndex = targetPaneIndex + (action === UNSHIFT ? 0 : 1);\n            const orientation = location === TOP || location === BOTTOM ? VERTICAL : HORIZONTAL;\n            const dimension = location === TOP || location === BOTTOM ? HEIGHT : WIDTH;\n            const newParentPane = {\n                type: SPLIT,\n                orientation,\n                panes: [],\n            };\n            const previewSize = that.draggedPane.preview[dimension];\n            const size = `${previewSize}px`;\n\n            pane.size = size;\n\n            if (isGlobalDock) {\n                newParentPane.panes.push(targetPaneParent);\n                (location === TOP || location === LEFT) ? newParentPane.panes.unshift(pane) : newParentPane.panes.push(pane);\n                that.options.rootPane = newParentPane;\n                return;\n            }\n\n            if (((location === TOP || location === BOTTOM) && targetPaneParent.orientation === VERTICAL) ||\n                ((location === LEFT || location === RIGHT) && targetPaneParent.orientation === HORIZONTAL)) {\n                return targetPaneParent.panes.splice(paneIndex, 0, pane);\n            }\n\n            if (targetPane) {\n                newParentPane.size = targetPane.size;\n                targetPane.size = null;\n            }\n\n            targetPaneParent.panes.splice(targetPaneIndex, 1);\n            newParentPane.panes.push(targetPane);\n            newParentPane.panes[action](pane);\n            targetPaneParent.panes.splice(targetPaneIndex, 0, newParentPane);\n        },\n\n        _tabDock: function name(targetPane, pane) {\n            const that = this;\n            const targetPaneParent = that._findPaneByUid(targetPane.parentUid);\n            const targetPaneIndex = targetPaneParent.panes.indexOf(targetPane);\n            const newParentPane = {\n                type: TAB,\n                panes: [\n                    targetPane,\n                    pane\n                ]\n            };\n\n            if (targetPane.type === TAB) {\n                targetPane.panes.push(pane);\n                return;\n            }\n\n            targetPaneParent.panes.splice(targetPaneIndex, 1);\n            targetPaneParent.panes.splice(targetPaneIndex, 0, newParentPane);\n\n        },\n\n        _adjustSiblingSizes: function(pane, location, isGlobalDock) {\n            const that = this;\n            const siblings = that._getSiblings(pane);\n            const dimension = location === TOP || location === BOTTOM ? HEIGHT : WIDTH;\n            const parentSize = that.draggedPane.container[dimension];\n            const draggedPaneSize = that.draggedPane[dimension];\n            const newParentSize = parentSize - draggedPaneSize;\n            const noSizePanes = [];\n            let freeSpace = newParentSize;\n\n            if (location === MIDDLE) {\n                return;\n            }\n\n            if (siblings.length === 2) {\n                siblings[0].size = null;\n                return;\n            }\n\n            siblings.forEach((childPane) => {\n                if (childPane.uid === pane.uid) {\n                    return;\n                }\n\n                if (!childPane.size) {\n                    noSizePanes.push(childPane);\n                    return;\n                }\n\n                childPane.size = that._calculateNewSize(parentSize, newParentSize, childPane.size);\n                freeSpace -= childPane.size;\n            });\n\n            noSizePanes.forEach((noSizePane) => {\n                const newSize = freeSpace / noSizePanes.length;\n\n                noSizePane.size = newSize;\n            });\n\n        },\n\n        _calculateNewSize: function(parentSize, newParentSize, paneSize) {\n            const proportion = newParentSize / parentSize;\n            let unit = \"px\";\n            let noUnitSize;\n\n            if (isPercentageSize(paneSize)) {\n                unit = \"%\";\n            }\n\n            noUnitSize = +paneSize.replace(unit, \"\");\n\n            return `${noUnitSize * proportion}${unit}`;\n        },\n\n        _getSiblings: function(pane) {\n            const that = this;\n            const parent = that._findPaneByUid(pane.parentUid);\n\n            return parent.panes.filter(p => p.visible !== false &&\n                                            p.uid !== pane.uid &&\n                                            (p.unpinnable && p.unpinnable.unpinned !== true));\n        }\n    });\n\n    ui.plugin(DockManager);\n})(window.kendo.jQuery);\nvar kendo$1 = kendo;\n\nexport { kendo$1 as default };\n"]}